// OnboardingForm.jsx
import React, { useState } from 'react';
import { DatabaseService } from './DatabaseService';

const OnboardingForm = ({ onComplete }) => {
  const [step, setStep] = useState(1);
  const [formData, setFormData] = useState({
    name: '',
    interests: [],
    currentSkills: [],
    learningStyle: '',
    goals: '',
    experience: 'beginner',
    timeCommitment: ''
  });

  const interestOptions = [
    'Web Development', 'Data Science', 'Mobile Development', 'AI/ML', 
    'Cybersecurity', 'Cloud Computing', 'UI/UX Design', 'Game Development'
  ];

  const skillOptions = [
    'HTML/CSS', 'JavaScript', 'Python', 'React', 'Node.js', 
    'SQL', 'Git', 'Figma', 'AWS', 'Docker'
  ];

  const learningStyles = [
    { value: 'visual', label: 'Visual (diagrams, videos)', icon: '👁️' },
    { value: 'auditory', label: 'Auditory (podcasts, lectures)', icon: '🎧' },
    { value: 'kinesthetic', label: 'Hands-on (projects, coding)', icon: '💻' },
    { value: 'reading', label: 'Reading/Writing (articles, docs)', icon: '📚' }
  ];

  const handleMultiSelect = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: prev[field].includes(value) 
        ? prev[field].filter(item => item !== value)
        : [...prev[field], value]
    }));
  };

  const handleSubmit = () => {
    if (formData.interests.length === 0) {
      alert('Please select at least one interest');
      return;
    }
    
    const userId = 'user-' + Date.now();
    DatabaseService.saveUser(userId, formData);
    onComplete(userId, formData);
  };

  const canProceed = () => {
    switch(step) {
      case 1:
        return formData.name.trim() !== '' && formData.experience !== '';
      case 2:
        return formData.interests.length > 0;
      case 3:
        return true; // Current skills are optional
      case 4:
        return formData.learningStyle !== '';
      case 5:
        return formData.goals.trim() !== '' && formData.timeCommitment !== '';
      default:
        return false;
    }
  };

  const renderStep = () => {
    switch(step) {
      case 1:
        return (
          <div className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Your Name *</label>
              <input
                type="text"
                value={formData.name}
                onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="Enter your name"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Experience Level *</label>
              <select
                value={formData.experience}
                onChange={(e) => setFormData(prev => ({ ...prev, experience: e.target.value }))}
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                required
              >
                <option value="beginner">Beginner</option>
                <option value="intermediate">Intermediate</option>
                <option value="expert">Expert</option>
              </select>
            </div>
          </div>
        );
      
      case 2:
        return (
          <div className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-3">What are you interested in learning? *</label>
              <p className="text-sm text-gray-500 mb-4">Select all that apply (at least one required)</p>
              <div className="grid grid-cols-2 gap-3">
                {interestOptions.map(interest => (
                  <button
                    key={interest}
                    type="button"
                    onClick={() => handleMultiSelect('interests', interest)}
                    className={`p-3 text-left border rounded-lg transition-colors ${
                      formData.interests.includes(interest)
                        ? 'bg-blue-50 border-blue-500 text-blue-700'
                        : 'border-gray-300 hover:border-gray-400'
                    }`}
                  >
                    {interest}
                  </button>
                ))}
              </div>
            </div>
          </div>
        );
      
      case 3:
        return (
          <div className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-3">Current Skills</label>
              <p className="text-sm text-gray-500 mb-4">Select skills you already have (optional)</p>
              <div className="grid grid-cols-2 gap-3">
                {skillOptions.map(skill => (
                  <button
                    key={skill}
                    type="button"
                    onClick={() => handleMultiSelect('currentSkills', skill)}
                    className={`p-3 text-left border rounded-lg transition-colors ${
                      formData.currentSkills.includes(skill)
                        ? 'bg-green-50 border-green-500 text-green-700'
                        : 'border-gray-300 hover:border-gray-400'
                    }`}
                  >
                    {skill}
                  </button>
                ))}
              </div>
            </div>
          </div>
        );
      
      case 4:
        return (
          <div className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-3">Preferred Learning Style *</label>
              <div className="space-y-3">
                {learningStyles.map(style => (
                  <button
                    key={style.value}
                    type="button"
                    onClick={() => setFormData(prev => ({ ...prev, learningStyle: style.value }))}
                    className={`w-full p-4 text-left border rounded-lg transition-colors flex items-center space-x-3 ${
                      formData.learningStyle === style.value
                        ? 'bg-purple-50 border-purple-500 text-purple-700'
                        : 'border-gray-300 hover:border-gray-400'
                    }`}
                  >
                    <span className="text-2xl">{style.icon}</span>
                    <span>{style.label}</span>
                  </button>
                ))}
              </div>
            </div>
          </div>
        );
      
      case 5:
        return (
          <div className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Learning Goals *</label>
              <textarea
                value={formData.goals}
                onChange={(e) => setFormData(prev => ({ ...prev, goals: e.target.value }))}
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                rows="4"
                placeholder="What do you want to achieve? (e.g., Get a job in web development, build a mobile app, etc.)"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Time Commitment (hours per week) *</label>
              <select
                value={formData.timeCommitment}
                onChange={(e) => setFormData(prev => ({ ...prev, timeCommitment: e.target.value }))}
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                required
              >
                <option value="">Select time commitment</option>
                <option value="1-5">1-5 hours</option>
                <option value="5-10">5-10 hours</option>
                <option value="10-20">10-20 hours</option>
                <option value="20+">20+ hours</option>
              </select>
            </div>
          </div>
        );
      
      default:
        return null;
    }
  };

  return (
    <div className="max-w-2xl mx-auto bg-white rounded-xl shadow-lg p-8">
      <div className="mb-8">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-2xl font-bold text-gray-900">Let's Get Started</h2>
          <span className="text-sm text-gray-500">Step {step} of 5</span>
        </div>
        <div className="w-full bg-gray-200 rounded-full h-2">
          <div 
            className="bg-blue-600 h-2 rounded-full transition-all duration-300"
            style={{ width: `${(step / 5) * 100}%` }}
          ></div>
        </div>
      </div>

      {renderStep()}

      <div className="flex justify-between mt-8">
        <button
          type="button"
          onClick={() => setStep(step - 1)}
          disabled={step === 1}
          className="px-6 py-2 border border-gray-300 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50"
        >
          Previous
        </button>
        
        {step < 5 ? (
          <button
            type="button"
            onClick={() => setStep(step + 1)}
            disabled={!canProceed()}
            className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Next
          </button>
        ) : (
          <button
            type="button"
            onClick={handleSubmit}
            disabled={!canProceed()}
            className="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Generate My Learning Path
          </button>
        )}
      </div>
    </div>
  );
};

export default OnboardingForm;